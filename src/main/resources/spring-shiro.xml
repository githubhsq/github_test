<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">


	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager"/>
		<property name="authenticator" ref="authenticator"></property>
		<property name="realms">
			<list>
				<ref bean="shiroRealm" />
				<ref bean="secondRealm" />
			</list>
		</property>
		<property name="sessionManager" ref="sessionManager"/>
		<!--<property name="rememberMeManager" ref="rememberMeManager" />-->
		<!--<property name="rememberMeManager.cookie.maxAge" value="10"/>-->
	</bean>

	<!-- 定义Session ID生成管理器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

	<!-- 配置Session DAO的操作处理 -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<!-- 设置session缓存的名字，这个名字可以任意 -->
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
		<!-- 定义该Session DAO操作中所使用的ID生成器 -->
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>

	<!-- 配置需要向Cookie中保存数据的配置模版 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID -->
		<constructor-arg value="mldn-session-id"/>
		<!-- 保证该系统不会受到跨域的脚本操作供给 -->
		<property name="httpOnly" value="true"/>
		<!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 -->
		<property name="maxAge" value="-1"/>
	</bean>

	<!-- rememberMe管理器 -->
	<!--<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">-->
		<!--<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />-->
		<!--<property name="cookie" ref="sessionIdCookie" />-->
	<!--</bean>-->

	<!-- 定义会话管理器的操作 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager" >
		<!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 -->
		<property name="globalSessionTimeout" value="1800000"/>
		<!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
		<property name="deleteInvalidSessions" value="true"/>
		<!-- 定义要使用的无效的Session定时调度器 -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		<!-- 需要让此session可以使用该定时调度器进行检测 -->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 定义Session可以进行序列化的工具类 -->
		<property name="sessionDAO" ref="sessionDAO"/>
		<!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		<!-- 定义sessionIdCookie模版可以进行操作的启用 -->
		<property name="sessionIdCookieEnabled" value="true"/>

	</bean>

	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<!-- 设置session的失效扫描间隔，单位为毫秒 -->
		<property name="sessionValidationInterval" value="100000"/>
		<!-- 随后还需要定义有一个会话管理器的程序类的引用 -->
		<property name="sessionManager" ref="sessionManager"/>
	</bean>
	<!--&lt;!&ndash; 缓存管理器 &ndash;&gt;-->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml"/>
	</bean>

	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy" />
		</property>
	</bean>

	<bean id="shiroRealm" class="com.tsingsoft.realms.ShiroRealm">
		<property name="credentialsMatcher">
			<bean  class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property>
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
	</bean>

	<bean id="secondRealm" class="com.tsingsoft.realms.SecondRealm">
		<property name="credentialsMatcher">
			<bean  class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="SHA1"></property>
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		  depends-on="lifecycleBeanPostProcessor" />
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.jsp"/>
		<property name="successUrl" value="/list.jsp" />
		<property name="unauthorizedUrl" value="unauthorized.jsp"/>

		<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap" />
		<!--<property name="filterChainDefinitions">-->
			<!--<value>-->
				<!--/login.jsp = anon-->
				<!--/shiro/login = anon-->
                <!--/shiro/logout = logout-->
				<!--/admin.jsp = roles[user]-->
				<!--/user.jsp = roles[admin]-->
				<!--/** = authc-->
			<!--</value>-->
		<!--</property>-->
	</bean>
    <bean id="filterChainDefinitionMapBuilder"
		  class="com.tsingsoft.factory.FilterChainDefinitionMapBuilder" />

	<bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder"
		  factory-method="buildFilterChainDefinitionMap"/>

	<bean id="shiroService" class="com.tsingsoft.service.ShiroService"></bean>
</beans>

